#!/bin/python

import curses, subprocess, socket, sys, re, string, os, paramiko, time, select

# This script will connect to a list of servers (defined in the 'serverlist' list, oddly enough)
# and then cycle through the Drupal sites listed in /home/jenkins/workspace on each server,
# building three lists:
#
# 1. A list of all sites;
# 2. A list of all the modules installed on each of the sites;
# 3. A list of sites containing modules specified in the find_broken_modules function (note: versions are not yet checked)
#
# Author: Matt N
#
# Dependencies: Paramiko (usually already installed on OSX), Python 2.7, Drush on target systems
#
# Version: 1


# TODO: implement remote Drush cleanup ( kill -9 `ps -ef | grep drush | awk '{print $2}'` )

def ssh_chat( server, sitename ):
    
    """This function takes a server and site name as arguments
    then locates the correct index.php file in the Drupal
    site to determine where to run Drush. This location
    is then returned via the 'pass3' var.
    """

    pass3=""
    client=paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    com="find /home/jenkins/workspace/%s -maxdepth 3 -name 'index.php' | xargs grep -l 'Drupal installation'" % ( sitename )
    client.connect(server)
    sitelist=[]
    output=""
    stdin, stdout, stderr = client.exec_command(com)

    print "Connection established to %s. Checking %s." % ( server, sitename )
    stdout=stdout.readlines()
    stderr=stderr.readlines()
    client.close()

    # Format result for returning

    for i in range(len(stdout)):
        pass1=stdout[0].rstrip('\n').split(',')
        pass2=pass1[0].lstrip('u')
        pass3=pass2.rstrip('/index.php')

    client.close()
    return str(pass3)

def find_broken_modules( server ):

    """This function will run through the results generated by the
    retrieve_site_info function and search for modules defined in the 
    'testlist' list, and finally dump the list into a text file.
    NOTE: special characters must be escaped! 
    """

    try:

        # Define list of modules to be searched for.

        testlist=['RESTful','Coder \(coder\)','Webform Multifile']
        for x in testlist:
            
            #Convert list element to string
            
            teststring=''.join(x)
            directory = "./results/%s" % ( server )
            for rootdir, dirs, files in os.walk(directory):
                for f in files:

                    # Construct full path and open server site list file

                    log = open(os.path.join(rootdir, f),'r')
                    lines = log.readlines()
                    for i in lines:
                        if any(re.findall(r'%s' % (teststring), i, re.IGNORECASE)):
 
                            # Only count the modules if they're actually installed. Some can
                            # be affected even if they're disabled.

                            if not ("Not installed") in i: 
                                print("MATCH FOUND! FILE: %s" % (f)) 
                                print(i)

                                # Append results to file

                                fh = open("./results/Vulnerable.txt", "a")
                                fh.write('Site: %s - module: %s \n' % (f, teststring))
                                fh.close()
				
    except:
        print "WARNING: problem checking directories!"

def retrieve_site_info( server ):
    
    """This function iterates through the list of sites
    generated for a server and polls them using Drush
    to get module information. This can be modified
    to use any valid Drush command by editing the 
    appropriate vars below.
    """

    try:
        sites = []

        # Open file containing list of sites on a server

        f = open("./results/%s.txt" % (server), "r")
        lines = f.readlines()
        for i in range(len(lines)):
            sites.append(lines[i].rstrip('\n').split(','))
        f.close()
        for i in sites:
            try:

                # Hacky site name var reformatting - would str(i) work?

                new_i = "".join(i)
                if any(re.findall(r'vanweb56', server, re.IGNORECASE)):
                    drushcmd = "drush9"
                else:
                    drushcmd = "drush"
                targetdir = ssh_chat( server, new_i )
                print(targetdir)
                if targetdir:
                    modlistcmd = '''ssh %s cd %s && %s pm-list --type=Module''' % ( server, targetdir, drushcmd )
                    modlistargs = modlistcmd.split()
                    modlistcomm = subprocess.Popen(modlistargs, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    stdout, stderr = modlistcomm.communicate()

                    # Drush 9 check - it doesn't support Drupal 6, so switch to older Drush if needed

                    if ("does not support") in stderr:
                        modlistcmd2 = '''ssh %s cd %s && drush pm-list --type=Module''' % ( server, targetdir )
                        modlistargs2 = modlistcmd2.split()
                        modlistcomm2 = subprocess.Popen(modlistargs2, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                        stdout, stderr = modlistcomm2.communicate()

                #else:
                    #stdout = "No Drupal install found."
                    #print(stdout)

                if not os.path.exists("./results/%s" % server):
                    os.makedirs("./results/%s" % server)
     
                fh = open("./results/%s/%s.txt" % ( server, new_i ), "w") 
                fh.writelines(stdout)
                fh.close()

                # If an error was returned, catch the output and write it to the file

                with open("./results/%s/%s.txt" % ( server, new_i ), "a") as origfile:
                    origfile.write(stderr)
                    origfile.write(targetdir)

            except:
                print "Problem with %s on %s!" % ( str(i), server )

    except:
        return "Problem getting details from %s." % ( server )

def retrieve_dir_list( server ):

    """This function connects to a server and creates a list of sites
    listed in /home/jenkins/workspace. It also prepares some directories
    and files to hold results.
    """

    try:
        if not os.path.exists("./results"):
                    os.makedirs("./results")
                    resultfile = open("./results/Vulnerable.txt", "w+")
        dirlistcmd = '''ssh %s ls /home/jenkins/workspace''' % ( server )
        dirlistargs = dirlistcmd.split()
        dirlistcomm = subprocess.Popen(dirlistargs, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = dirlistcomm.communicate()

        fh = open("./results/%s.txt" % ( server ), "w")
        fh.writelines(stdout)
        fh.close()

    except:
        return "Problem getting directories on %s." % ( server )


# List of servers to cycle through - the system you run this script on
# will need keybased SSH root access to them to work properly

serverlist=['vanweb56.appno.net','vanweb55.appno.net','vanweb1.appno.net','vanweb2.appno.net']

# Build lists of Drupal sites (Jenkins workspace subdirs)

for i in serverlist:
    retrieve_dir_list( i )

# Build lists of Drupal module info

for i in serverlist:
    retrieve_site_info( i )

# Run through results and search for affected modules (defined in the function, look up)

for i in serverlist:
    find_broken_modules( i )
